{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.dstruct.core, :imports nil, :requires nil, :uses nil, :defs {neighbors {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 110, :column 7, :end-line 110, :end-column 16, :arglists (quote ([x coll]))}, :name thi.ng.dstruct.core/neighbors, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :method-params ([x coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x coll]))}, apply-to-keys {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 152, :column 7, :end-line 152, :end-column 20, :arglists (quote ([type keys f & args])), :doc "Applies `f` with `args` to all given `keys` in `type`.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(type keys f args)], :arglists ([type keys f & args]), :arglists-meta (nil)}}, :name thi.ng.dstruct.core/apply-to-keys, :variadic true, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(type keys f args)], :arglists ([type keys f & args]), :arglists-meta (nil)}, :method-params [(type keys f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 3, :fn-var true, :arglists ([type keys f & args]), :doc "Applies `f` with `args` to all given `keys` in `type`."}, postwalk {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 220, :column 7, :end-line 220, :end-column 15, :arglists (quote ([f form]))}, :name thi.ng.dstruct.core/postwalk, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 15, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form]))}, interval-set {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([& ivals])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ivals)], :arglists ([& ivals]), :arglists-meta (nil)}}, :name thi.ng.dstruct.core/interval-set, :variadic true, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ivals)], :arglists ([& ivals]), :arglists-meta (nil)}, :method-params [(ivals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists ([& ivals])}, filter-tree {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 223, :column 7, :end-line 223, :end-column 18, :arglists (quote ([f root])), :doc "Applies `f` to root coll and every of its (nested) elements. Returns\n  a vector of items for which `f` returned a truthy value."}, :name thi.ng.dstruct.core/filter-tree, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 18, :method-params ([f root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f root])), :doc "Applies `f` to root coll and every of its (nested) elements. Returns\n  a vector of items for which `f` returned a truthy value."}, all-after {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 189, :column 7, :end-line 189, :end-column 16, :arglists (quote ([item coll])), :doc "Returns a new collection of all items after `item` in original `coll`.\n  If `coll` is a vector, the new collection is created with `subvec`.\n  Returns original coll if item isn't found."}, :name thi.ng.dstruct.core/all-after, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :method-params ([item coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([item coll])), :doc "Returns a new collection of all items after `item` in original `coll`.\n  If `coll` is a vector, the new collection is created with `subvec`.\n  Returns original coll if item isn't found."}, vec-conj2* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 33, :column 6, :end-line 33, :end-column 16}, :name thi.ng.dstruct.core/vec-conj2*, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :method-params ([p1__30879# p2__30880#]), :protocol-impl nil, :arglists-meta (), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists nil}, rotate-left {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 175, :column 7, :end-line 175, :end-column 18, :arglists (quote ([n xs]))}, :name thi.ng.dstruct.core/rotate-left, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 18, :method-params ([n xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n xs]))}, bisect {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 101, :column 7, :end-line 101, :end-column 13, :arglists (quote ([f coll] [f f2 coll])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f f2 coll]), :arglists ([f coll] [f f2 coll]), :arglists-meta (nil nil)}}, :name thi.ng.dstruct.core/bisect, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f f2 coll]), :arglists ([f coll] [f f2 coll]), :arglists-meta (nil nil)}, :method-params ([f coll] [f f2 coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists ([f coll] [f f2 coll])}, check-intervals {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 68, :column 7, :end-line 68, :end-column 22, :arglists (quote ([& ivals])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ivals)], :arglists ([& ivals]), :arglists-meta (nil)}}, :name thi.ng.dstruct.core/check-intervals, :variadic true, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ivals)], :arglists ([& ivals]), :arglists-meta (nil)}, :method-params [(ivals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 0, :fn-var true, :arglists ([& ivals])}, wrap-seq {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 166, :column 7, :end-line 166, :end-column 15, :arglists (quote ([s head tail]))}, :name thi.ng.dstruct.core/wrap-seq, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 15, :method-params ([s head tail]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s head tail]))}, reduce-pairs {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 157, :column 7, :end-line 157, :end-column 19, :arglists (quote ([f1 f2 coll] [f1 f2 acc coll])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([f1 f2 coll] [f1 f2 acc coll]), :arglists ([f1 f2 coll] [f1 f2 acc coll]), :arglists-meta (nil nil)}}, :name thi.ng.dstruct.core/reduce-pairs, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([f1 f2 coll] [f1 f2 acc coll]), :arglists ([f1 f2 coll] [f1 f2 acc coll]), :arglists-meta (nil nil)}, :method-params ([f1 f2 coll] [f1 f2 acc coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 4, :fn-var true, :arglists ([f1 f2 coll] [f1 f2 acc coll])}, merge-deep {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 55, :column 7, :end-line 55, :end-column 17, :arglists (quote ([a b] [a b & maps])), :doc "Calls `merge-with` using `deep-merge` as merge fn.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a b]), :arglists ([a b] [a b & maps]), :arglists-meta (nil nil)}}, :name thi.ng.dstruct.core/merge-deep, :variadic true, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([a b]), :arglists ([a b] [a b & maps]), :arglists-meta (nil nil)}, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists ([a b] [a b & maps]), :doc "Calls `merge-with` using `deep-merge` as merge fn."}, successive-nth {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 120, :column 7, :end-line 120, :end-column 21, :arglists (quote ([n coll] [n step coll])), :doc "Returns a lazyseq of `n`-element vectors, each one containing\n  a successive elements of the original collection.\n\n      (successive-nth 3 [1 2 3 4])\n      => ([1 2 3] [2 3 4] [3 4 5])", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n coll] [n step coll]), :arglists ([n coll] [n step coll]), :arglists-meta (nil nil)}}, :name thi.ng.dstruct.core/successive-nth, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n coll] [n step coll]), :arglists ([n coll] [n step coll]), :arglists-meta (nil nil)}, :method-params ([n coll] [n step coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists ([n coll] [n step coll]), :doc "Returns a lazyseq of `n`-element vectors, each one containing\n  a successive elements of the original collection.\n\n      (successive-nth 3 [1 2 3 4])\n      => ([1 2 3] [2 3 4] [3 4 5])"}, cartesian-product {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 81, :column 7, :end-line 81, :end-column 24, :arglists (quote ([& seqs])), :doc "All the ways to take one item from each sequence\n  (taken from clojure.contrib.combinatorics)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}}, :name thi.ng.dstruct.core/cartesian-product, :variadic true, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}, :method-params [(seqs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists ([& seqs]), :doc "All the ways to take one item from each sequence\n  (taken from clojure.contrib.combinatorics)"}, iterate-while {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 199, :column 7, :end-line 199, :end-column 20, :arglists (quote ([pred f x]))}, :name thi.ng.dstruct.core/iterate-while, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 20, :method-params ([pred f x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred f x]))}, index {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 3, :column 7, :end-line 3, :end-column 12, :arglists (quote ([i t]))}, :name thi.ng.dstruct.core/index, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 12, :method-params ([i t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i t]))}, walk {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 213, :column 7, :end-line 213, :end-column 11, :arglists (quote ([inner outer form]))}, :name thi.ng.dstruct.core/walk, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 11, :method-params ([inner outer form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 3, :fn-var true, :arglists (quote ([inner outer form]))}, deep-merge {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 43, :column 7, :end-line 43, :end-column 17, :arglists (quote ([l r])), :doc "Merge fn to be used with `merge-with`. Recursively merges map\n  values which are maps or seqs (for the latter `into` is used, only\n  if RHS is seq or set as well). If the RHS value has the metadata key\n  `:replace` set, it is used as new value without merging."}, :name thi.ng.dstruct.core/deep-merge, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 17, :method-params ([l r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l r])), :doc "Merge fn to be used with `merge-with`. Recursively merges map\n  values which are maps or seqs (for the latter `into` is used, only\n  if RHS is seq or set as well). If the RHS value has the metadata key\n  `:replace` set, it is used as new value without merging."}, set-conj {:name thi.ng.dstruct.core/set-conj, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 27, :column 1, :end-line 27, :end-column 14, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 27, :column 6, :end-line 27, :end-column 14}}, collect-set {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 35, :column 7, :end-line 35, :end-column 18, :arglists (quote ([f coll]))}, :name thi.ng.dstruct.core/collect-set, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 18, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll]))}, index-kv! {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([m k v]))}, :name thi.ng.dstruct.core/index-kv!, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k v]))}, stringify-keys {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 238, :column 7, :end-line 238, :end-column 21, :arglists (quote ([m]))}, :name thi.ng.dstruct.core/stringify-keys, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, demunge-flags-seq {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 258, :column 7, :end-line 258, :end-column 24, :arglists (quote ([kw xs])), :doc "Like `demunge-flags` but returns lazyseq of booleans in same order as xs.\n\n      (demunge-flags-seq :cad \"abcd\") => [true false true true]"}, :name thi.ng.dstruct.core/demunge-flags-seq, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 24, :method-params ([kw xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kw xs])), :doc "Like `demunge-flags` but returns lazyseq of booleans in same order as xs.\n\n      (demunge-flags-seq :cad \"abcd\") => [true false true true]"}, value-set {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([idx v] [f idx v])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([idx v] [f idx v]), :arglists ([idx v] [f idx v]), :arglists-meta (nil nil)}}, :name thi.ng.dstruct.core/value-set, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([idx v] [f idx v]), :arglists ([idx v] [f idx v]), :arglists-meta (nil nil)}, :method-params ([idx v] [f idx v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists ([idx v] [f idx v])}, iterate-n {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 205, :column 7, :end-line 205, :end-column 16, :arglists (quote ([n f x])), :doc "Iteratively applies f to x, n times, then returns result."}, :name thi.ng.dstruct.core/iterate-n, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :method-params ([n f x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n f x])), :doc "Iteratively applies f to x, n times, then returns result."}, set-conj2* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 31, :column 6, :end-line 31, :end-column 16}, :name thi.ng.dstruct.core/set-conj2*, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 16, :method-params ([p1__30877# p2__30878#]), :protocol-impl nil, :arglists-meta (), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists nil}, successive-nth-indexed {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 137, :column 7, :end-line 137, :end-column 29, :arglists (quote ([n coll] [n idx coll])), :doc "Returns a lazyseq of nested 2-element vectors, each one containing\n  a vector of `n` successive elements of the original collection and\n  an sequence index.\n\n      (successive-nth-indexed 2 [10 20 30 40])\n      => ([[10 20] 0] [[20 30] 1] [[30 40] 2])", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n coll] [n idx coll]), :arglists ([n coll] [n idx coll]), :arglists-meta (nil nil)}}, :name thi.ng.dstruct.core/successive-nth-indexed, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n coll] [n idx coll]), :arglists ([n coll] [n idx coll]), :arglists-meta (nil nil)}, :method-params ([n coll] [n idx coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists ([n coll] [n idx coll]), :doc "Returns a lazyseq of nested 2-element vectors, each one containing\n  a vector of `n` successive elements of the original collection and\n  an sequence index.\n\n      (successive-nth-indexed 2 [10 20 30 40])\n      => ([[10 20] 0] [[20 30] 1] [[30 40] 2])"}, wrap-str {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 236, :column 7, :end-line 236, :end-column 15, :arglists (quote ([s pre post]))}, :name thi.ng.dstruct.core/wrap-str, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 15, :method-params ([s pre post]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s pre post]))}, demunge-flags {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 241, :column 7, :end-line 241, :end-column 20, :arglists (quote ([kw xs])), :doc "Takes a keyword or string of flags and string/seq of items, returns\n  map with items as keys and boolean values indicating if an item has\n  been found in the string representation of the kw. If `kw` is nil,\n  returns nil.\n\n      (demunge-flags :cad \"abcd\")\n      #_=> {:a true :b false :c true :d true}"}, :name thi.ng.dstruct.core/demunge-flags, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 20, :method-params ([kw xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kw xs])), :doc "Takes a keyword or string of flags and string/seq of items, returns\n  map with items as keys and boolean values indicating if an item has\n  been found in the string representation of the kw. If `kw` is nil,\n  returns nil.\n\n      (demunge-flags :cad \"abcd\")\n      #_=> {:a true :b false :c true :d true}"}, unwrap-str {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 234, :column 7, :end-line 234, :end-column 17, :arglists (quote ([s n]))}, :name thi.ng.dstruct.core/unwrap-str, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 17, :method-params ([s n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s n]))}, index! {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([i t]))}, :name thi.ng.dstruct.core/index!, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 13, :method-params ([i t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i t]))}, vec-conj {:name thi.ng.dstruct.core/vec-conj, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 29, :column 1, :end-line 29, :end-column 14, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 29, :column 6, :end-line 29, :end-column 14}}, append-first {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 172, :column 7, :end-line 172, :end-column 19, :arglists (quote ([xs]))}, :name thi.ng.dstruct.core/append-first, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 19, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, index-of {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 181, :column 7, :end-line 181, :end-column 15, :arglists (quote ([coll item]))}, :name thi.ng.dstruct.core/index-of, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 15, :method-params ([coll item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll item]))}, index-kv {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 11, :column 7, :end-line 11, :end-column 15, :arglists (quote ([m k v]))}, :name thi.ng.dstruct.core/index-kv, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 15, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k v]))}, collect-indexed {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :line 38, :column 7, :end-line 38, :end-column 22, :arglists (quote ([f f2 coll]))}, :name thi.ng.dstruct.core/collect-indexed, :variadic false, :file ".cljs_nashorn_repl/thi/ng/dstruct/core.cljc", :end-column 22, :method-params ([f f2 coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f f2 coll]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :replace}, :order [:replace :else]}, :doc nil}