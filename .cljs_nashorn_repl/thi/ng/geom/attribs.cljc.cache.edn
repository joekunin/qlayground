{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.geom.attribs, :imports nil, :requires {thi.ng.geom.matrix thi.ng.geom.matrix, thi.ng.geom.utils thi.ng.geom.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.utils, v thi.ng.geom.vector, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, thi.ng.geom.vector thi.ng.geom.vector, g thi.ng.geom.core}, :uses {M44 thi.ng.geom.matrix, vec3 thi.ng.geom.vector, vec2 thi.ng.geom.vector}, :defs {uv-tube {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 145, :column 7, :end-line 145, :end-column 14, :arglists (quote ([_ vid _ {:keys [u v du dv]}])), :doc "Generates tubular UV coordinates, using data provided in\n  options map (:u :v :du :dv keys)"}, :name thi.ng.geom.attribs/uv-tube, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 14, :method-params ([_ vid _ p__26405]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ vid _ {:keys [u v du dv]}])), :doc "Generates tubular UV coordinates, using data provided in\n  options map (:u :v :du :dv keys)"}, generate-face-attribs {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 68, :column 7, :end-line 68, :end-column 28, :arglists (quote ([verts face-id attribs opts])), :doc "Takes a vector of face vertices, face id, a map of vertex attribute\n  generator fns and an options arg passed to the attribute generator\n  fns. Returns 2-elem vector of [verts vert-attribs]. The generator\n  fns themselves take these 4 args and should return the attribute for\n  a single vertex: face-id, vertex-id, vertex, opts (a map)."}, :name thi.ng.geom.attribs/generate-face-attribs, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 28, :method-params ([verts face-id attribs opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 4, :fn-var true, :arglists (quote ([verts face-id attribs opts])), :doc "Takes a vector of face vertices, face id, a map of vertex attribute\n  generator fns and an options arg passed to the attribute generator\n  fns. Returns 2-elem vector of [verts vert-attribs]. The generator\n  fns themselves take these 4 args and should return the attribute for\n  a single vertex: face-id, vertex-id, vertex, opts (a map)."}, face-attribs {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 54, :column 7, :end-line 54, :end-column 19, :arglists (quote ([fattribs])), :doc "Vertex attribute generator using given seq of attribs. The seq\n  should contain at least the same number of elements as there are\n  faces to be generated. Each item itself is a vector of attrib\n  values (in vertex order) to be assigned to each vertex. Returns\n  generator fn."}, :name thi.ng.geom.attribs/face-attribs, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 19, :method-params ([fattribs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fattribs])), :doc "Vertex attribute generator using given seq of attribs. The seq\n  should contain at least the same number of elements as there are\n  faces to be generated. Each item itself is a vector of attrib\n  values (in vertex order) to be assigned to each vertex. Returns\n  generator fn."}, uv-polygon-disc {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 171, :column 7, :end-line 171, :end-column 22, :arglists (quote ([res])), :doc "HOF UV generator for polygons/polyhedras. Takes polygon resolution\n  and computes N UV coords, returns generator fn"}, :name thi.ng.geom.attribs/uv-polygon-disc, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 22, :method-params ([res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([res])), :doc "HOF UV generator for polygons/polyhedras. Takes polygon resolution\n  and computes N UV coords, returns generator fn"}, uv-default-rect {:name thi.ng.geom.attribs/uv-default-rect, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 135, :column 1, :end-line 135, :end-column 21, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 135, :column 6, :end-line 135, :end-column 21}}, supplied-attrib {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 96, :column 7, :end-line 96, :end-column 22, :arglists (quote ([attrib] [attrib tx])), :doc "Higher order helper, returns attribute generator fn for types which\n  emit pre-computed values as part of their `as-mesh` impl. Takes\n  attrib key and for each vertex looks up value in opts map (which is\n  supplied by supporting types, e.g. sphere). If called via 2 args,\n  the looked up values will also be passed to transformation fn (2nd\n  arg).", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([attrib] [attrib tx]), :arglists ([attrib] [attrib tx]), :arglists-meta (nil nil)}}, :name thi.ng.geom.attribs/supplied-attrib, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([attrib] [attrib tx]), :arglists ([attrib] [attrib tx]), :arglists-meta (nil nil)}, :method-params ([attrib] [attrib tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists ([attrib] [attrib tx]), :doc "Higher order helper, returns attribute generator fn for types which\n  emit pre-computed values as part of their `as-mesh` impl. Takes\n  attrib key and for each vertex looks up value in opts map (which is\n  supplied by supporting types, e.g. sphere). If called via 2 args,\n  the looked up values will also be passed to transformation fn (2nd\n  arg)."}, const-face-attribs {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 62, :column 7, :end-line 62, :end-column 25, :arglists (quote ([fattribs])), :doc "Similar to face-attribs fn, but for attributes which are constant\n  for all vertices of a single face. Takes a seq of attrib values and\n  returns generator fn."}, :name thi.ng.geom.attribs/const-face-attribs, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 25, :method-params ([fattribs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fattribs])), :doc "Similar to face-attribs fn, but for attributes which are constant\n  for all vertices of a single face. Takes a seq of attrib values and\n  returns generator fn."}, uv-flat-disc {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 157, :column 7, :end-line 157, :end-column 19, :arglists (quote ([_ vid _ {:keys [theta r], :as opts}])), :doc "Generates UV coordinates for a circle/trianglefan, using data\n  provided in options map (:theta & :r keys). The first vertex of each\n  triangle is assumed to be in the center of the circle, the other 2\n  vertices are located at the circles perimeter."}, :name thi.ng.geom.attribs/uv-flat-disc, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 19, :method-params ([_ vid _ p__26413]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ vid _ {:keys [theta r], :as opts}])), :doc "Generates UV coordinates for a circle/trianglefan, using data\n  provided in options map (:theta & :r keys). The first vertex of each\n  triangle is assumed to be in the center of the circle, the other 2\n  vertices are located at the circles perimeter."}, uv-rect-for-size {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 109, :column 7, :end-line 109, :end-column 23, :arglists (quote ([w] [w h] [w h x y uw vh])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([w] [w h] [w h x y uw vh]), :arglists ([w] [w h] [w h x y uw vh]), :arglists-meta (nil nil nil)}}, :name thi.ng.geom.attribs/uv-rect-for-size, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([w] [w h] [w h x y uw vh]), :arglists ([w] [w h] [w h x y uw vh]), :arglists-meta (nil nil nil)}, :method-params ([w] [w h] [w h x y uw vh]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 6, :fn-var true, :arglists ([w] [w h] [w h x y uw vh])}, uv-faces {:name thi.ng.geom.attribs/uv-faces, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 137, :column 1, :end-line 137, :end-column 14, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 137, :column 6, :end-line 137, :end-column 14}}, uv-cube-map-h {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 119, :column 7, :end-line 119, :end-column 20, :arglists (quote ([h] [h pow2?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([h] [h pow2?]), :arglists ([h] [h pow2?]), :arglists-meta (nil nil)}}, :name thi.ng.geom.attribs/uv-cube-map-h, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([h] [h pow2?]), :arglists ([h] [h pow2?]), :arglists-meta (nil nil)}, :method-params ([h] [h pow2?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists ([h] [h pow2?])}, uv-cube-map-v {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :line 127, :column 7, :end-line 127, :end-column 20, :arglists (quote ([h] [w pow2?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([h] [w pow2?]), :arglists ([h] [w pow2?]), :arglists-meta (nil nil)}}, :name thi.ng.geom.attribs/uv-cube-map-v, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/attribs.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([h] [w pow2?]), :arglists ([h] [w pow2?]), :arglists-meta (nil nil)}, :method-params ([h] [w pow2?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists ([h] [w pow2?])}}, :require-macros {mm thi.ng.math.macros, thi.ng.math.macros thi.ng.math.macros}, :cljs.analyzer/constants {:seen #{:r :v :theta :du :delta :dv :u}, :order [:u :v :du :dv :theta :r :delta]}, :doc nil}