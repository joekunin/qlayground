{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.geom.basicmesh, :imports nil, :requires {thi.ng.geom.matrix thi.ng.geom.matrix, thi.ng.geom.utils thi.ng.geom.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.utils, r clojure.core.reducers, clojure.core.reducers clojure.core.reducers, v thi.ng.geom.vector, thi.ng.xerror.core thi.ng.xerror.core, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, thi.ng.dstruct.core thi.ng.dstruct.core, thi.ng.geom.types thi.ng.geom.types, err thi.ng.xerror.core, thi.ng.geom.vector thi.ng.geom.vector, thi.ng.geom.meshface thi.ng.geom.meshface, mf thi.ng.geom.meshface, g thi.ng.geom.core, d thi.ng.dstruct.core}, :uses {M44 thi.ng.geom.matrix, vec3 thi.ng.geom.vector, vec2 thi.ng.geom.vector, *eps* thi.ng.math.core, BasicMesh thi.ng.geom.types}, :defs {basic-mesh {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/basicmesh.cljc", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([])), :doc "Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices."}, :name thi.ng.geom.basicmesh/basic-mesh, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/basicmesh.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices."}, add-face* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_nashorn_repl/thi/ng/geom/basicmesh.cljc", :line 17, :column 8, :end-line 17, :end-column 17, :private true, :arglists (quote ([mesh [fverts]]))}, :private true, :name thi.ng.geom.basicmesh/add-face*, :variadic false, :file ".cljs_nashorn_repl/thi/ng/geom/basicmesh.cljc", :end-column 17, :method-params ([mesh p__26892]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mesh [fverts]]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:vertices :fn :mesh :faces :fnormals}, :order [:vertices :faces :fnormals :mesh :fn]}, :doc nil}