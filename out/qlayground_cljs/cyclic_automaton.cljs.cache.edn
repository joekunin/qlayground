{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name qlayground-cljs.cyclic-automaton, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {rule-1 {:name qlayground-cljs.cyclic-automaton/rule-1, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 6, :column 1, :end-line 6, :end-column 12, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 6, :column 6, :end-line 6, :end-column 12}}, rule-90 {:name qlayground-cljs.cyclic-automaton/rule-90, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 8, :column 1, :end-line 8, :end-column 13, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 8, :column 6, :end-line 8, :end-column 13}}, rule-30 {:name qlayground-cljs.cyclic-automaton/rule-30, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 18, :column 1, :end-line 18, :end-column 13, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 18, :column 6, :end-line 18, :end-column 13}}, representations {:name qlayground-cljs.cyclic-automaton/representations, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 28, :column 1, :end-line 28, :end-column 31, :private true, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 28, :column 16, :end-line 28, :end-column 31, :private true}}, extract-neighborhoods {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 32, :column 8, :end-line 32, :end-column 29, :private true, :arglists (quote ([state]))}, :private true, :name qlayground-cljs.cyclic-automaton/extract-neighborhoods, :variadic false, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :end-column 29, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, evolve-once {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 35, :column 8, :end-line 35, :end-column 19, :private true, :arglists (quote ([rule state]))}, :private true, :name qlayground-cljs.cyclic-automaton/evolve-once, :variadic false, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :end-column 19, :method-params ([rule state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rule state]))}, evolve {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([rule initial-state time-steps]))}, :name qlayground-cljs.cyclic-automaton/evolve, :variadic false, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :end-column 13, :method-params ([rule initial-state time-steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rule initial-state time-steps]))}, convert-state {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 44, :column 7, :end-line 44, :end-column 20, :arglists (quote ([state]))}, :name qlayground-cljs.cyclic-automaton/convert-state, :variadic false, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, render {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/cyclic_automaton.cljs", :line 52, :column 7, :end-line 52, :end-column 13, :arglists (quote ([states]))}, :name qlayground-cljs.cyclic-automaton/render, :variadic false, :file "src/qlayground_cljs/cljs/cyclic_automaton.cljs", :end-column 13, :method-params ([states]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([states]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}