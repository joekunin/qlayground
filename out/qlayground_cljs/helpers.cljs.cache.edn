{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name qlayground-cljs.helpers, :imports nil, :requires nil, :uses nil, :defs {cycle-between {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/src/qlayground_cljs/cljs/helpers.cljs", :line 3, :column 7, :end-line 3, :end-column 20, :arglists (quote ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction])), :doc "Cycle between min and max with inc-step and dec-step starting at\n  start in direction :up", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction]), :arglists ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction]), :arglists-meta (nil nil nil nil nil)}}, :name qlayground-cljs.helpers/cycle-between, :variadic false, :file "src/qlayground_cljs/cljs/helpers.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction]), :arglists ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction]), :arglists-meta (nil nil nil nil nil)}, :method-params ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 6, :fn-var true, :arglists ([min max] [min max inc-step] [min max inc-step dec-step] [start min max inc-step dec-step] [start min max inc-step dec-step direction]), :doc "Cycle between min and max with inc-step and dec-step starting at\n  start in direction :up"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:down :up}, :order [:up :down]}, :doc nil}