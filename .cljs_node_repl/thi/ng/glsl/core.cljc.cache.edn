{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.glsl.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, dep com.stuartsierra.dependency, com.stuartsierra.dependency com.stuartsierra.dependency}, :uses nil, :defs {re-meta {:name thi.ng.glsl.core/re-meta, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :line 40, :column 1, :end-line 40, :end-column 23, :private true, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 40, :column 16, :end-line 40, :end-column 23, :private true}}, assemble {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 87, :column 7, :end-line 87, :end-column 15, :arglists (quote ([spec]))}, :name thi.ng.glsl.core/assemble, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, glsl-spec-plain {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 97, :column 7, :end-line 97, :end-column 22, :arglists (quote ([deps src]))}, :name thi.ng.glsl.core/glsl-spec-plain, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 22, :method-params ([deps src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([deps src]))}, clean-line-breaks {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 26, :column 8, :end-line 26, :end-column 25, :private true, :arglists (quote ([src]))}, :private true, :name thi.ng.glsl.core/clean-line-breaks, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 25, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src]))}, minify-line {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 16, :column 8, :end-line 16, :end-column 19, :private true, :arglists (quote ([src]))}, :private true, :name thi.ng.glsl.core/minify-line, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 19, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src]))}, build-graph {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 80, :column 8, :end-line 80, :end-column 19, :private true, :arglists (quote ([spec] [g curr])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [g curr]), :arglists ([spec] [g curr]), :arglists-meta (nil nil)}}, :private true, :name thi.ng.glsl.core/build-graph, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [g curr]), :arglists ([spec] [g curr]), :arglists-meta (nil nil)}, :method-params ([spec] [g curr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [g curr])}, extract-glsl-meta {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 43, :column 7, :end-line 43, :end-column 24, :arglists (quote ([src])), :doc "Attempts to extract function name, return type and args from given\n  GLSL source string. If successful, returns map w/ these\n  keys: :glsl-name :glsl-return :glsl-args"}, :name thi.ng.glsl.core/extract-glsl-meta, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 24, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src])), :doc "Attempts to extract function name, return type and args from given\n  GLSL source string. If successful, returns map w/ these\n  keys: :glsl-name :glsl-return :glsl-args"}, minify {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 29, :column 7, :end-line 29, :end-column 13, :arglists (quote ([src]))}, :name thi.ng.glsl.core/minify, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 13, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src]))}, minify-floats {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/glsl/core.cljc", :line 6, :column 8, :end-line 6, :end-column 21, :private true, :arglists (quote ([src]))}, :private true, :name thi.ng.glsl.core/minify-floats, :variadic false, :file ".cljs_node_repl/thi/ng/glsl/core.cljc", :end-column 21, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:glsl-args :glsl-name :else :glsl-return :src :deps}, :order [:else :glsl-return :glsl-name :glsl-args :deps :src]}, :doc nil}