{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.geom.gmesh, :imports nil, :requires {set clojure.set, thi.ng.geom.matrix thi.ng.geom.matrix, thi.ng.geom.utils thi.ng.geom.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.utils, r clojure.core.reducers, clojure.core.reducers clojure.core.reducers, v thi.ng.geom.vector, thi.ng.math.core thi.ng.math.core, clojure.set clojure.set, m thi.ng.math.core, thi.ng.dstruct.core thi.ng.dstruct.core, thi.ng.geom.types thi.ng.geom.types, thi.ng.geom.vector thi.ng.geom.vector, thi.ng.geom.meshface thi.ng.geom.meshface, mf thi.ng.geom.meshface, g thi.ng.geom.core, d thi.ng.dstruct.core}, :uses {AABB thi.ng.geom.types, M44 thi.ng.geom.matrix, vec3 thi.ng.geom.vector, GMesh thi.ng.geom.types, vec2 thi.ng.geom.vector, *eps* thi.ng.math.core}, :defs {remove-vertex* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 65, :column 7, :end-line 65, :end-column 21, :arglists (quote ([mesh v]))}, :name thi.ng.geom.gmesh/remove-vertex*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 21, :method-params ([mesh v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mesh v]))}, replace-vertex* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 71, :column 7, :end-line 71, :end-column 22, :arglists (quote ([mesh v v2] [mesh v v2 faces])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([mesh v v2] [mesh v v2 faces]), :arglists ([mesh v v2] [mesh v v2 faces]), :arglists-meta (nil nil)}}, :name thi.ng.geom.gmesh/replace-vertex*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([mesh v v2] [mesh v v2 faces]), :arglists ([mesh v v2] [mesh v v2 faces]), :arglists-meta (nil nil)}, :method-params ([mesh v v2] [mesh v v2 faces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 4, :fn-var true, :arglists ([mesh v v2] [mesh v v2 faces])}, merge-vertices* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 79, :column 7, :end-line 79, :end-column 22, :arglists (quote ([mesh a b]))}, :name thi.ng.geom.gmesh/merge-vertices*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 22, :method-params ([mesh a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mesh a b]))}, add-face* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 15, :column 8, :end-line 15, :end-column 17, :private true, :arglists (quote ([{:keys [vertices edges faces], :as mesh} [verts]]))}, :private true, :name thi.ng.geom.gmesh/add-face*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 17, :method-params ([p__33287 p__33288]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [vertices edges faces], :as mesh} [verts]]))}, face-neighbors-shared-edges {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 45, :column 7, :end-line 45, :end-column 34, :arglists (quote ([{:keys [edges]} f]))}, :name thi.ng.geom.gmesh/face-neighbors-shared-edges, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 34, :method-params ([p__33315 f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [edges]} f]))}, gmesh {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 92, :column 7, :end-line 92, :end-column 12, :arglists (quote ([])), :doc "Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices."}, :name thi.ng.geom.gmesh/gmesh, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices."}, saddle {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 170, :column 7, :end-line 170, :end-column 13, :arglists (quote ([s]))}, :name thi.ng.geom.gmesh/saddle, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, lathe-mesh {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 140, :column 7, :end-line 140, :end-column 17, :arglists (quote ([points res phi rot-fn] [points res phi rot-fn face-fn])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([points res phi rot-fn] [points res phi rot-fn face-fn]), :arglists ([points res phi rot-fn] [points res phi rot-fn face-fn]), :arglists-meta (nil nil)}}, :name thi.ng.geom.gmesh/lathe-mesh, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([points res phi rot-fn] [points res phi rot-fn face-fn]), :arglists ([points res phi rot-fn] [points res phi rot-fn face-fn]), :arglists-meta (nil nil)}, :method-params ([points res phi rot-fn] [points res phi rot-fn face-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 5, :fn-var true, :arglists ([points res phi rot-fn] [points res phi rot-fn face-fn])}, vertex-valence* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 59, :column 7, :end-line 59, :end-column 22, :arglists (quote ([mesh v]))}, :name thi.ng.geom.gmesh/vertex-valence*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 22, :method-params ([mesh v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mesh v]))}, vertex-faces* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 62, :column 7, :end-line 62, :end-column 20, :arglists (quote ([mesh v]))}, :name thi.ng.geom.gmesh/vertex-faces*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 20, :method-params ([mesh v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mesh v]))}, vertex-neighbors* {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 53, :column 7, :end-line 53, :end-column 24, :arglists (quote ([{vertices :vertices} v]))}, :name thi.ng.geom.gmesh/vertex-neighbors*, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 24, :method-params ([p__33320 v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{vertices :vertices} v]))}, vertices-planar? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gmesh.cljc", :line 38, :column 7, :end-line 38, :end-column 23, :arglists (quote ([[a b c :as verts]]))}, :name thi.ng.geom.gmesh/vertices-planar?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gmesh.cljc", :end-column 23, :method-params ([p__33308]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b c :as verts]]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:wfb :vertices :fn :ewnfb :default :vnormals :next :mesh :normals :prev :f :faces :flags :ensfb :edges :fnormals :ewsfb}, :order [:vertices :edges :faces :next :prev :f :default :flags :ewsfb :wfb :ensfb :ewnfb :mesh :fnormals :vnormals :normals :fn]}, :doc nil}