{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{apply}, :name thi.ng.geom.gl.camera, :imports nil, :requires {m thi.ng.math.core, thi.ng.math.core thi.ng.math.core, v thi.ng.geom.vector, thi.ng.geom.vector thi.ng.geom.vector, mat thi.ng.geom.matrix, thi.ng.geom.matrix thi.ng.geom.matrix}, :uses {vec3 thi.ng.geom.vector}, :defs {apply {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gl/camera.cljc", :line 20, :column 7, :end-line 20, :end-column 12, :arglists (quote ([spec cam])), :doc "Takes a GL model spec map & camera, injects :view & :proj\n  uniforms into spec."}, :name thi.ng.geom.gl.camera/apply, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gl/camera.cljc", :end-column 12, :method-params ([spec cam]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec cam])), :doc "Takes a GL model spec map & camera, injects :view & :proj\n  uniforms into spec."}, update-keys {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gl/camera.cljc", :line 26, :column 7, :end-line 26, :end-column 18, :arglists (quote ([m ks opts])), :doc "Takes a map m, key seq and map of new vals, replaces keys in m with\n  new vals. If a value in opts map is a function, applies fn to value\n  of key in original map."}, :name thi.ng.geom.gl.camera/update-keys, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gl/camera.cljc", :end-column 18, :method-params ([m ks opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m ks opts])), :doc "Takes a map m, key seq and map of new vals, replaces keys in m with\n  new vals. If a value in opts map is a function, applies fn to value\n  of key in original map."}, set-view {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gl/camera.cljc", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([cam opts]))}, :name thi.ng.geom.gl.camera/set-view, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gl/camera.cljc", :end-column 15, :method-params ([cam opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cam opts]))}, set-projection {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gl/camera.cljc", :line 40, :column 7, :end-line 40, :end-column 21, :arglists (quote ([cam opts]))}, :name thi.ng.geom.gl.camera/set-projection, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gl/camera.cljc", :end-column 21, :method-params ([cam opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cam opts]))}, perspective-camera {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/gl/camera.cljc", :line 45, :column 7, :end-line 45, :end-column 25, :arglists (quote ([opts]))}, :name thi.ng.geom.gl.camera/perspective-camera, :variadic false, :file ".cljs_node_repl/thi/ng/geom/gl/camera.cljc", :end-column 25, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:aspect :uniforms :eye :fov :up :near :proj :target :far :view}, :order [:uniforms :view :proj :eye :target :up :fov :aspect :near :far]}, :doc nil}