{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.geom.utils.intersect, :imports nil, :requires {g thi.ng.geom.core, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.utils, thi.ng.geom.utils thi.ng.geom.utils, v thi.ng.geom.vector, thi.ng.geom.vector thi.ng.geom.vector, m thi.ng.math.core, thi.ng.math.core thi.ng.math.core}, :uses {V2 thi.ng.geom.vector, vec3 thi.ng.geom.vector, V3 thi.ng.geom.vector, vec2 thi.ng.geom.vector, *eps* thi.ng.math.core}, :defs {triaabb-edge-test-e2 {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 168, :column 8, :end-line 168, :end-column 28, :private true, :arglists (quote ([[ax ay az :as a] [bx by bz] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]))}, :private true, :name thi.ng.geom.utils.intersect/triaabb-edge-test-e2, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :method-params ([p__32507 p__32508 p__32509 p__32510 p__32511]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 5, :fn-var true, :arglists (quote ([[ax ay az :as a] [bx by bz] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]))}, face-b2? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 300, :column 8, :end-line 300, :end-column 16, :private true, :arglists (quote ([verts refv n])), :doc "Like face-b1?, but optimized for last face of tetrahedron."}, :private true, :name thi.ng.geom.utils.intersect/face-b2?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 16, :method-params ([verts refv n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 3, :fn-var true, :arglists (quote ([verts refv n])), :doc "Like face-b1?, but optimized for last face of tetrahedron."}, intersect-plane-aabb? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 264, :column 7, :end-line 264, :end-column 28, :arglists (quote ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]])), :doc "Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]]), :arglists ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-plane-aabb?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]]), :arglists ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]]), :arglists-meta (nil nil)}, :method-params ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 4, :fn-var true, :arglists ([p n q s] [[px py pz] [nx ny nz :as n] [sx sy sz]]), :doc "Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box."}, intersect-aabb-aabb? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 44, :column 7, :end-line 44, :end-column 27, :arglists (quote ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-aabb-aabb?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :arglists-meta (nil nil)}, :method-params ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 4, :fn-var true, :arglists ([{pa :p, sa :size} {pb :p, sb :size}] [pa pb qa qb])}, check-faces-b {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 357, :column 8, :end-line 357, :end-column 21, :private true, :arglists (quote ([deltas epoints verts p specs])), :doc "Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."}, :private true, :name thi.ng.geom.utils.intersect/check-faces-b, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 21, :method-params ([deltas epoints verts p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 5, :fn-var true, :arglists (quote ([deltas epoints verts p specs])), :doc "Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect."}, intersect-plane-plane? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 240, :column 7, :end-line 240, :end-column 29, :arglists (quote ([an aw bn bw]))}, :name thi.ng.geom.utils.intersect/intersect-plane-plane?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 29, :method-params ([an aw bn bw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 4, :fn-var true, :arglists (quote ([an aw bn bw]))}, sq {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 14, :column 8, :end-line 14, :end-column 10, :private true, :arglists (quote ([x]))}, :private true, :name thi.ng.geom.utils.intersect/sq, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, intersect-aabb-sphere? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 55, :column 7, :end-line 55, :end-column 29, :arglists (quote ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-aabb-sphere?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :arglists-meta (nil nil)}, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 4, :fn-var true, :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py pz] [qx qy qz] [cx cy cz] r])}, intersect-circle-circle? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 16, :column 7, :end-line 16, :end-column 31, :arglists (quote ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-circle-circle?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 31, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :arglists-meta (nil nil)}, :method-params ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 4, :fn-var true, :arglists ([{p :p, r1 :r} {q :p, r2 :r}] [p r1 q r2])}, intersect-rect-rect? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 30, :column 7, :end-line 30, :end-column 27, :arglists (quote ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-rect-rect?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :arglists-meta (nil nil)}, :method-params ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 4, :fn-var true, :arglists ([{[px py] :p, [w h] :size} {[qx qy] :p, [qw qh] :size}] [[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]])}, get-edge {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 324, :column 8, :end-line 324, :end-column 16, :private true, :arglists (quote ([edges epoints id])), :doc "Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."}, :private true, :name thi.ng.geom.utils.intersect/get-edge, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 16, :method-params ([edges epoints id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 3, :fn-var true, :arglists (quote ([edges epoints id])), :doc "Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge]."}, check-faces-a {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 335, :column 8, :end-line 335, :end-column 21, :private true, :arglists (quote ([deltas epoints verts p specs])), :doc "Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."}, :private true, :name thi.ng.geom.utils.intersect/check-faces-a, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 21, :method-params ([deltas epoints verts p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 5, :fn-var true, :arglists (quote ([deltas epoints verts p specs])), :doc "Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early."}, edge-a {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 304, :column 8, :end-line 304, :end-column 14, :private true, :arglists (quote ([ma mb ea eb])), :doc "Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."}, :private true, :name thi.ng.geom.utils.intersect/edge-a, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 14, :method-params ([ma mb ea eb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ma mb ea eb])), :doc "Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge."}, intersect-ray-sphere? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 100, :column 7, :end-line 100, :end-column 28, :arglists (quote ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-ray-sphere?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :arglists-meta (nil nil)}, :method-params ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 4, :fn-var true, :arglists ([{rp :p, dir :dir} {p :p, r :r}] [rp dir p r])}, intersect-ray-triangle3? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 120, :column 7, :end-line 120, :end-column 31, :arglists (quote ([p d a b c]))}, :name thi.ng.geom.utils.intersect/intersect-ray-triangle3?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 31, :method-params ([p d a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p d a b c]))}, triaabb-edge-minmax {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 175, :column 8, :end-line 175, :end-column 27, :private true, :arglists (quote ([a b c s]))}, :private true, :name thi.ng.geom.utils.intersect/triaabb-edge-minmax, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 27, :method-params ([a b c s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a b c s]))}, intersect-triangle3-aabb? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 180, :column 7, :end-line 180, :end-column 32, :arglists (quote ([a b c p s]))}, :name thi.ng.geom.utils.intersect/intersect-triangle3-aabb?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 32, :method-params ([a b c p s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 5, :fn-var true, :arglists (quote ([a b c p s]))}, intersect-ray-plane? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 249, :column 7, :end-line 249, :end-column 27, :arglists (quote ([rp dir n w]))}, :name thi.ng.geom.utils.intersect/intersect-ray-plane?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 27, :method-params ([rp dir n w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rp dir n w]))}, intersect-ray2-edges? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 236, :column 7, :end-line 236, :end-column 28, :arglists (quote ([rp rd edges]))}, :name thi.ng.geom.utils.intersect/intersect-ray2-edges?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :method-params ([rp rd edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rp rd edges]))}, subdot {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 284, :column 8, :end-line 284, :end-column 14, :private true, :arglists (quote ([a b c])), :doc "Computes sum((a-b)*c), where a, b, c are 3D vectors."}, :private true, :name thi.ng.geom.utils.intersect/subdot, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 14, :method-params ([a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b c])), :doc "Computes sum((a-b)*c), where a, b, c are 3D vectors."}, intersect-tetrahedra? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 372, :column 7, :end-line 372, :end-column 28, :arglists (quote ([[pa pb pc pd :as p] [qa qb qc qd :as q]])), :doc "Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."}, :name thi.ng.geom.utils.intersect/intersect-tetrahedra?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :method-params ([p__32695 p__32696]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[pa pb pc pd :as p] [qa qb qc qd :as q]])), :doc "Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on)."}, intersect-sphere-sphere? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 94, :column 7, :end-line 94, :end-column 31, :arglists (quote ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-sphere-sphere?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 31, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :arglists-meta (nil nil)}, :method-params ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 4, :fn-var true, :arglists ([{p1 :p, r1 :r} {p2 :p, r2 :r}] [p1 r1 p2 r2])}, intersect-line2-line2? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 197, :column 7, :end-line 197, :end-column 29, :arglists (quote ([[px1 py1 :as p] [qx1 qy1 :as q] [px2 py2 :as lp] [qx2 qy2 :as lq]]))}, :name thi.ng.geom.utils.intersect/intersect-line2-line2?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 29, :method-params ([p__32572 p__32573 p__32574 p__32575]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[px1 py1 :as p] [qx1 qy1 :as q] [px2 py2 :as lp] [qx2 qy2 :as lq]]))}, intersect-plane-sphere? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 277, :column 7, :end-line 277, :end-column 30, :arglists (quote ([n w p r]))}, :name thi.ng.geom.utils.intersect/intersect-plane-sphere?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 30, :method-params ([n w p r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n w p r]))}, intersect-rect-circle? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 36, :column 7, :end-line 36, :end-column 29, :arglists (quote ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists-meta (nil nil)}}, :name thi.ng.geom.utils.intersect/intersect-rect-circle?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :arglists-meta (nil nil)}, :method-params ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 4, :fn-var true, :arglists ([{p :p, sz :size} {s :p, r :r}] [[px py] [qx qy] [cx cy] r])}, triaabb-edge-test-e1 {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 161, :column 8, :end-line 161, :end-column 28, :private true, :arglists (quote ([[ax ay az] [bx by bz :as b] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]))}, :private true, :name thi.ng.geom.utils.intersect/triaabb-edge-test-e1, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :method-params ([p__32466 p__32467 p__32468 p__32469 p__32470]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 5, :fn-var true, :arglists (quote ([[ax ay az] [bx by bz :as b] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]))}, intersect-line2-edges? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 221, :column 7, :end-line 221, :end-column 29, :arglists (quote ([rp rq edges]))}, :name thi.ng.geom.utils.intersect/intersect-line2-edges?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 29, :method-params ([rp rq edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rp rq edges]))}, triaabb-axis-test {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 146, :column 8, :end-line 146, :end-column 25, :private true, :arglists (quote ([pa1 pb1 pa2 pb2 a b fa fb sa sb]))}, :private true, :name thi.ng.geom.utils.intersect/triaabb-axis-test, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 25, :method-params ([pa1 pb1 pa2 pb2 a b fa fb sa sb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 10, :fn-var true, :arglists (quote ([pa1 pb1 pa2 pb2 a b fa fb sa sb]))}, face-b1? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 295, :column 8, :end-line 295, :end-column 16, :private true, :arglists (quote ([deltas n])), :doc "Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."}, :private true, :name thi.ng.geom.utils.intersect/face-b1?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 16, :method-params ([deltas n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([deltas n])), :doc "Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive."}, triaabb-edge-test-e0 {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 154, :column 8, :end-line 154, :end-column 28, :private true, :arglists (quote ([[ax ay az :as a] [bx by bz :as b] [cx cy cz] [ex ey ez :as e] [sx sy sz]]))}, :private true, :name thi.ng.geom.utils.intersect/triaabb-edge-test-e0, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 28, :method-params ([p__32425 p__32426 p__32427 p__32428 p__32429]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 5, :fn-var true, :arglists (quote ([[ax ay az :as a] [bx by bz :as b] [cx cy cz] [ex ey ez :as e] [sx sy sz]]))}, face-a {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 288, :column 8, :end-line 288, :end-column 14, :private true, :arglists (quote ([f deltas])), :doc "Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."}, :private true, :name thi.ng.geom.utils.intersect/face-a, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 14, :method-params ([f deltas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f deltas])), :doc "Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords]."}, intersect-aabb-frustum? {:protocol-inline nil, :meta {:file "/Users/quasar/dev/qlayground-cljs/.cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :line 73, :column 7, :end-line 73, :end-column 30, :arglists (quote ([[px py pz :as p] size planes])), :doc "Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside"}, :name thi.ng.geom.utils.intersect/intersect-aabb-frustum?, :variadic false, :file ".cljs_node_repl/thi/ng/geom/utils/intersect.cljc", :end-column 30, :method-params ([p__32360 size planes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[px py pz :as p] size planes])), :doc "Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside"}}, :require-macros {mm thi.ng.math.macros, thi.ng.math.macros thi.ng.math.macros}, :cljs.analyzer/constants {:seen #{:q :intersect-outside :r :inside :dir :parallel :ua :ub :type :e :size :on-plane :coincident-no-intersect :no-intersect :same-plane :intersect :f :f* :coincident :p :degenerate :outside}, :order [:p :r :size :outside :intersect :inside :dir :type :degenerate :same-plane :no-intersect :q :coincident :coincident-no-intersect :parallel :ua :ub :intersect-outside :on-plane :f :f* :e]}, :doc nil}